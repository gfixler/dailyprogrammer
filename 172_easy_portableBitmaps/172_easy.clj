(def chardata {\  ["00000","00000","00000","00000","00000","00000","00000"]
               \A ["00100","01010","10001","11111","10001","10001","10001"]
               \B ["11110","10001","10001","11110","10001","10001","11110"]
               \C ["01110","10001","10000","10000","10000","10001","01110"]
               \D ["11110","10001","10001","10001","10001","10001","11110"]
               \E ["11111","10000","10000","11110","10000","10000","11111"]
               \F ["11111","10000","10000","11110","10000","10000","10000"]
               \G ["01111","10000","10000","10011","10001","10001","01111"]
               \H ["10001","10001","10001","11111","10001","10001","10001"]
               \I ["01110","00100","00100","00100","00100","00100","01110"]
               \J ["00001","00001","00001","00001","00001","10001","01111"]
               \K ["10001","10010","10100","11000","10100","10010","10001"]
               \L ["10000","10000","10000","10000","10000","10000","11111"]
               \M ["10001","11011","10101","10001","10001","10001","10001"]
               \N ["10001","10001","11001","10101","10011","10001","10001"]
               \O ["01110","10001","10001","10001","10001","10001","01110"]
               \P ["11110","10001","10001","11110","10000","10000","10000"]
               \Q ["01110","10001","10001","10001","10101","01110","00011"]
               \R ["11110","10001","10001","11110","10100","10010","10001"]
               \S ["01110","10001","10000","01110","00001","10001","01110"]
               \T ["11111","00100","00100","00100","00100","00100","00100"]
               \U ["10001","10001","10001","10001","10001","10001","01110"]
               \V ["10001","10001","10001","10001","10001","01010","00100"]
               \W ["10001","10001","10001","10101","11011","10001","10001"]
               \X ["10001","10001","01010","00100","01010","10001","10001"]
               \Y ["10001","10001","01010","00100","00100","00100","00100"]
               \Z ["11111","00001","00010","00100","01000","10000","11111"]})

(defn unlines [s]
  (apply str (interpose "\n" s)))

(defn bit-rows [msg]
  (->> (for [c msg] (chardata c))
       (apply mapv vector)
       (map #(interpose \0 %))
       (map flatten)
       (map #(apply str %))))

(defn make-pbm [msg]
  (let [bits (bit-rows msg)
        width (count (first bits))
        height (count bits)
        size (str width " " height)]
    (unlines ["P1" size (unlines
                          (map #(apply str (interpose " " %))
                               bits))])))

