import Data.List
import qualified Data.Map as Map

getCharBits :: Char -> [String]
getCharBits x
    | x == ' ' = ["00000","00000","00000","00000","00000","00000","00000"]
    | x == 'A' = ["00100","01010","10001","11111","10001","10001","10001"]
    | x == 'B' = ["11110","10001","10001","11110","10001","10001","11110"]
    | x == 'C' = ["01110","10001","10000","10000","10000","10001","01110"]
    | x == 'D' = ["11110","10001","10001","10001","10001","10001","11110"]
    | x == 'E' = ["11111","10000","10000","11110","10000","10000","11111"]
    | x == 'F' = ["11111","10000","10000","11110","10000","10000","10000"]
    | x == 'G' = ["01111","10000","10000","10011","10001","10001","01111"]
    | x == 'H' = ["10001","10001","10001","11111","10001","10001","10001"]
    | x == 'I' = ["01110","00100","00100","00100","00100","00100","01110"]
    | x == 'J' = ["00001","00001","00001","00001","00001","10001","01111"]
    | x == 'K' = ["10001","10010","10100","11000","10100","10010","10001"]
    | x == 'L' = ["10000","10000","10000","10000","10000","10000","11111"]
    | x == 'M' = ["10001","11011","10101","10001","10001","10001","10001"]
    | x == 'N' = ["10001","10001","11001","10101","10011","10001","10001"]
    | x == 'O' = ["01110","10001","10001","10001","10001","10001","01110"]
    | x == 'P' = ["11110","10001","10001","11110","10000","10000","10000"]
    | x == 'Q' = ["01110","10001","10001","10001","10101","01110","00011"]
    | x == 'R' = ["11110","10001","10001","11110","10100","10010","10001"]
    | x == 'S' = ["01110","10001","10000","01110","00001","10001","01110"]
    | x == 'T' = ["11111","00100","00100","00100","00100","00100","00100"]
    | x == 'U' = ["10001","10001","10001","10001","10001","10001","01110"]
    | x == 'V' = ["10001","10001","10001","10001","10001","01010","00100"]
    | x == 'W' = ["10001","10001","10001","10101","11011","10001","10001"]
    | x == 'X' = ["10001","10001","01010","00100","01010","10001","10001"]
    | x == 'Y' = ["10001","10001","01010","00100","00100","00100","00100"]
    | x == 'Z' = ["11111","00001","00010","00100","01000","10000","11111"]

msgLines :: String -> [String]
msgLines s = map unwords $ transpose $ map getCharBits s

makePBM :: String -> String
makePBM s = unlines ["P1", size, (unlines bitstrings)]
    where bitstrings = msgLines s
          width = length (bitstrings !! 0)
          height = length bitstrings
          size = show width ++ " " ++ show height

